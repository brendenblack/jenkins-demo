

//
// Retry, Continue or Abort on errors
//
public <R> R retryContinueOrAbort(final Closure<R> action) {
    try 
    {
        return action.call();
    } 
    catch (final exception) 
    {
        echo exception.toString()

        def userChoice
        timeout(time: 30, unit: 'MINUTES') 
        {
             userChoice = input(
                message: 'Something went wrong! Fix your errors and try again.',
                parameters: [
                    choice(
                        name: 'Next Action',
                        choices: ['Retry', 'Abort'].join('\n'),
                        description: 'Try again?'
                    )
                ]
            )
        }

        switch (userChoice) 
        {
            case 'Retry':
                return retryContinueOrAbort(action)
            default:
                echo 'User has opted to abort the action'
                throw exception;
        }
    }
};

pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                sh "rm -rf /vagrant/${params.EMAIL}; rm -f /home/jenkins/certificate-${params.EMAIL}.png; mkdir /vagrant/${params.EMAIL}; cp -a /home/jenkins/npe-e2edemo-war/. /vagrant/${params.EMAIL}"
            }
        }

        stage('Code!') {
            steps {
                input message: 'Take the time now to make any code changes you\'d like.\n\nWhen you\'re ready, press the "Push!" button to "push" your changes and attempt a build.', ok: 'Push!'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit tests') {
                    steps {
                        retryContinueOrAbort {
                            sh "cd /vagrant/${params.EMAIL}; mvn test"
                        }
                    }
                }
                stage ('Other cool tests') {
                    steps {
                        echo 'You\'re cool. Pass.'
                    }
                }
            }
        }

        stage('Package') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
                    sh "cd /vagrant/${params.EMAIL}; mvn -DskipTests package"
                }
            }
        }

        stage('Are you ready?') {
            steps {
                input message: 'Are you ready to deploy your changes to production?', ok: 'Deploy!'
            }
        }
        
        stage ('Deploying') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
                    sh "cd /vagrant/provision; ansible-playbook -i inventory.ini deploy.yml -e \"email=${params.EMAIL}\""
                }
                sh "convert -pointsize 130 -fill black -draw 'text 1170,1100 \"${params.EMAIL}\" ' /home/jenkins/certificate.png /home/jenkins/certificate-${params.EMAIL}.png"
                sh "mutt -s 'Jenkins automation booth' ${params.EMAIL} -a /home/jenkins/certificate-${params.EMAIL}.png < /home/jenkins/msg.txt"
            }
        }       
    }
}